# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Enable support for MSVC_RUNTIME_LIBRARY
cmake_policy(SET CMP0091 NEW)

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS cmake.toml)
	if(NOT DEFINED CMAKE_MSVC_RUNTIME_LIBRARY)
		set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
	endif()

endif()

# Options
option(BUILD_TESTS "" ${CMKR_ROOT_PROJECT})

# Variables
set(INSTALL_GTEST OFF)

project(obfuscator)

include(FetchContent)

# Fix warnings about DOWNLOAD_EXTRACT_TIMESTAMP
if(POLICY CMP0135)
	cmake_policy(SET CMP0135 NEW)
endif()
message(STATUS "Fetching zasm (b14c1b36c9bb453d8eb3a5b2cc180233f0e54a7a)...")
FetchContent_Declare(zasm
	GIT_REPOSITORY
		"https://github.com/zyantific/zasm"
	GIT_TAG
		b14c1b36c9bb453d8eb3a5b2cc180233f0e54a7a
)
FetchContent_MakeAvailable(zasm)

if(BUILD_TESTS) # build-tests
	message(STATUS "Fetching googletest (v1.15.2)...")
	FetchContent_Declare(googletest
		GIT_REPOSITORY
			"https://github.com/google/googletest"
		GIT_TAG
			v1.15.2
	)
	FetchContent_MakeAvailable(googletest)

endif()
message(STATUS "Fetching args (v1.0)...")
FetchContent_Declare(args
	GIT_REPOSITORY
		"https://github.com/LLVMParty/args"
	GIT_TAG
		v1.0
)
FetchContent_MakeAvailable(args)

message(STATUS "Fetching fmt...")
FetchContent_Declare(fmt
	URL
		"https://github.com/fmtlib/fmt/releases/download/10.2.1/fmt-10.2.1.zip"
	URL_HASH
		SHA256=312151a2d13c8327f5c9c586ac6cf7cddc1658e8f53edae0ec56509c8fa516c9
)
FetchContent_MakeAvailable(fmt)

message(STATUS "Fetching linux-pe (be6d1f6fc30fb8058b5220e0bb2652a6dc8ec0b0)...")
FetchContent_Declare(linux-pe
	GIT_REPOSITORY
		"https://github.com/can1357/linux-pe"
	GIT_TAG
		be6d1f6fc30fb8058b5220e0bb2652a6dc8ec0b0
)
FetchContent_MakeAvailable(linux-pe)

message(STATUS "Fetching json...")
FetchContent_Declare(json
	URL
		"https://github.com/nlohmann/json/releases/download/v3.11.3/json.tar.xz"
	URL_HASH
		SHA256=d6c65aca6b1ed68e7a182f4757257b107ae403032760ed6ef121c9d55e81757d
)
FetchContent_MakeAvailable(json)

# Target: obfuscator
set(obfuscator_SOURCES
	cmake.toml
	"include/obfuscator/analyze.hpp"
	"include/obfuscator/disassemble.hpp"
	"include/obfuscator/msvc-secure.hpp"
	"include/obfuscator/obfuscate.hpp"
	"include/obfuscator/program.hpp"
	"include/obfuscator/utility.hpp"
	"src/obfuscator/analyze.cpp"
	"src/obfuscator/disassemble.cpp"
	"src/obfuscator/obfuscate.cpp"
	"src/obfuscator/program.cpp"
	"src/obfuscator/utility.cpp"
)

add_library(obfuscator STATIC)

target_sources(obfuscator PRIVATE ${obfuscator_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${obfuscator_SOURCES})

add_library(riscvm::obfuscator ALIAS obfuscator)
target_compile_features(obfuscator PUBLIC
	cxx_std_20
)

target_include_directories(obfuscator PUBLIC
	include
)

target_link_libraries(obfuscator PUBLIC
	zasm::zasm
	linux-pe
	fmt::fmt
)

# Target: obfuscate
if(CMKR_ROOT_PROJECT) # root
	set(obfuscate_SOURCES
		cmake.toml
		"src/obfuscate.cpp"
	)

	add_executable(obfuscate)

	target_sources(obfuscate PRIVATE ${obfuscate_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${obfuscate_SOURCES})

	target_link_libraries(obfuscate PRIVATE
		riscvm::obfuscator
		args::args
		nlohmann_json::nlohmann_json
	)

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT obfuscate)
	endif()

endif()
# Target: tests
if(BUILD_TESTS) # build-tests
	set(tests_SOURCES
		cmake.toml
		"src/tests/test-analyze.cpp"
		"src/tests/test-program.cpp"
	)

	add_executable(tests)

	target_sources(tests PRIVATE ${tests_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${tests_SOURCES})

	target_link_libraries(tests PRIVATE
		riscvm::obfuscator
		gtest_main
	)

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT tests)
	endif()

endif()
