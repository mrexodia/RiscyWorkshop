# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.19)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Enable support for MSVC_RUNTIME_LIBRARY
cmake_policy(SET CMP0091 NEW)

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include("cmake/cmkr.cmake" OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS cmake.toml)
	if(NOT DEFINED CMAKE_MSVC_RUNTIME_LIBRARY)
		set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
	endif()

endif()

set(CMAKE_CONFIGURATION_TYPES Debug Release)

project(payload)

include("cmake/riscvm.cmake")

# Target: riscvm-crt0
set(riscvm-crt0_SOURCES
	cmake.toml
	"crt/riscvm-crt0.cpp"
)

add_library(riscvm-crt0 SHARED)

target_sources(riscvm-crt0 PRIVATE ${riscvm-crt0_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${riscvm-crt0_SOURCES})

# Target: hello
set(hello_SOURCES
	cmake.toml
	"crt/minicrt.c"
	"src/hello.c"
)

add_riscvm_executable(hello)

target_sources(hello PRIVATE ${hello_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${hello_SOURCES})

target_compile_definitions(hello PRIVATE
	_HAS_EXCEPTIONS=0
)

if(MSVC) # msvc
	target_compile_options(hello PRIVATE
		"/GR-"
		"/EHs-"
	)
endif()

if((CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$") OR (CMAKE_C_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_C_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$")) # clang
	target_compile_options(hello PRIVATE
		-fno-exceptions
		-fno-rtti
		-Wno-inconsistent-dllimport
	)
endif()

if(NOT TARGET riscvm-crt0)
	message(FATAL_ERROR "Target \"riscvm-crt0\" referenced by \"hello\" does not exist!")
endif()

target_link_libraries(hello PRIVATE
	riscvm-crt0
	ntdll.lib
)

if(MSVC) # msvc
	target_link_options(hello PRIVATE
		"/INCREMENTAL:NO"
		"/DEBUG"
	)
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT hello)
endif()

# Target: msgbox
set(msgbox_SOURCES
	cmake.toml
	"crt/minicrt.c"
	"src/msgbox.c"
)

add_riscvm_executable(msgbox)

target_sources(msgbox PRIVATE ${msgbox_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${msgbox_SOURCES})

target_compile_definitions(msgbox PRIVATE
	_HAS_EXCEPTIONS=0
)

if(MSVC) # msvc
	target_compile_options(msgbox PRIVATE
		"/GR-"
		"/EHs-"
	)
endif()

if((CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$") OR (CMAKE_C_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_C_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$")) # clang
	target_compile_options(msgbox PRIVATE
		-fno-exceptions
		-fno-rtti
		-Wno-inconsistent-dllimport
	)
endif()

if(NOT TARGET riscvm-crt0)
	message(FATAL_ERROR "Target \"riscvm-crt0\" referenced by \"msgbox\" does not exist!")
endif()

target_link_libraries(msgbox PRIVATE
	riscvm-crt0
	ntdll.lib
)

if(MSVC) # msvc
	target_link_options(msgbox PRIVATE
		"/INCREMENTAL:NO"
		"/DEBUG"
	)
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT msgbox)
endif()

# Target: c2test
set(c2test_SOURCES
	cmake.toml
	"crt/minicrt.c"
	"src/c2test.c"
)

add_riscvm_executable(c2test)

target_sources(c2test PRIVATE ${c2test_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${c2test_SOURCES})

target_compile_definitions(c2test PRIVATE
	_HAS_EXCEPTIONS=0
)

if(MSVC) # msvc
	target_compile_options(c2test PRIVATE
		"/GR-"
		"/EHs-"
	)
endif()

if((CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$") OR (CMAKE_C_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_C_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$")) # clang
	target_compile_options(c2test PRIVATE
		-fno-exceptions
		-fno-rtti
		-Wno-inconsistent-dllimport
	)
endif()

if(NOT TARGET riscvm-crt0)
	message(FATAL_ERROR "Target \"riscvm-crt0\" referenced by \"c2test\" does not exist!")
endif()

target_link_libraries(c2test PRIVATE
	riscvm-crt0
	ntdll.lib
)

if(MSVC) # msvc
	target_link_options(c2test PRIVATE
		"/INCREMENTAL:NO"
		"/DEBUG"
	)
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT c2test)
endif()
